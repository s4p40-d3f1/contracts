// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import "../../options/OptFiOption.sol";
import "../interfaces/OptFiOracle.sol";
import "../../libs/PRBMath/PRBMathUD60x18.sol";
import "../../libs/PRBMath/PRBMathSD59x18.sol";

/**
 * @title Implementation of the Black-76 model for options pricing
 * @author s4p40-d3fi
 * @dev This contract prices options using the Black-76 model - a variant of Black–Scholes model
 */
library OptFiBlack76Library {
    using PRBMathUD60x18 for uint256;
    using PRBMathSD59x18 for int256;

    /**
    * @dev This function applies the Black-76 model formula
    * @param strike The strike of the option
    * @param expiration The expiration of the option
    * @param assetPrice The underlying asset price of the option
    * @param volatility The underlying asset volatility of the option
    * @param riskFreeRate The risk free rate
    * @param isCall True for call or False for put
    * @return The option price
    *
    *  Formulas:
    *
    *      C = D * [ F * N(d1) - K * N(d2) ]
    *
    *      P = D * [ K * N(-d2) - F * N(-d1) ]
    *
    *          where:
    *
    *              C is the calculated price for a call option
    *
    *              P is the calculated price for a put option
    *
    *              D = e^-rt is the discount factor
    *                  where: 
    *                      r = is the risk-free rate
    *                      t =  time to maturity
    *
    *              F = S ÷ D is the forward price
    *                  where: S is the price of underlying asset
    *
    *              d1 = 1 ÷ ( σ * √t ) * [ ln( F ÷ K ) + (( σˆ2 * t ) ÷ 2 ) ]
    *              d2 = d1 - ( σ * √t )
    *                 where:
    *                      σ = the standard deviation of the stock's returns, 
    *                          a measure of its volatility
    *
    *              N() is the cumulative normal distribution function
    *      
    */
    function _getOptionPrice(uint256 strike, uint256 expiration, uint256 assetPrice, uint256 volatility, uint256 riskFreeRate, bool isCall) private view returns (uint256) {

        /*
        * Verifies input parameters are valid
        */
        require(expiration > block.timestamp, "Expiration of option contract must be in the future.");
        require(strike > 0, "Strike of the option must be greater than zero.");
        require(assetPrice > 0, "Asset price must be greater than zero.");
        require(riskFreeRate > 0, "Risk free rate must be greater than zero.");
        require(volatility > 0, "Volatility must be greater than zero.");
        
        /*
        * Calculates time to maturity in years
        */
        uint256 timeToMaturity = ((expiration * 1e18) - (block.timestamp*1e18)).div(365 days * 1e18);
        require(timeToMaturity > 0, "Time to maturity must be greater than zero.");
        
        /*
        * Calculates the discount factor
        */
        uint256 D = uint256(1e18).div(PRBMathUD60x18.e().pow(riskFreeRate.mul(timeToMaturity)));

        /*
        * Calculates the forward price
        */
        uint256 F = assetPrice.div(D);

        /*
        * Calculates an auxiliary variable
        *   Volatility for time to maturity period:
        *       volTm = σ * √t
        */
        uint256 volTm = volatility.mul(timeToMaturity.sqrt());

        /*
        * Calculates d1
        *   d1 = 1 ÷ ( σ * √t ) * [ ln( F ÷ K ) + (( σˆ2 * t ) ÷ 2 ) ]
        */
        int256 d1 = int256(1e18).div(int256(volTm)).mul(int256(F.div(strike)).ln() + int256((volatility.powu(2).mul(timeToMaturity).div(2e18))));

        /*
        * Calculates d2
        *   d2 = d1 - ( σ * √t )
        */
        int256 d2 = d1 - int256(volTm);
        
        /*
        * Calculates and returns option price
        */
        if (isCall){
            //C = D * [ F * N(d1) - K * N(d2) ]
            return D.mul(zScore(d1).mul(F) - zScore(d2).mul(strike));
        }
        else{
            //P = D * [ K * N(-d2) - F * N(-d1)]
            return D.mul(zScore(-1*d2).mul(strike) - zScore(-1*d1).mul(F));
        }
    }

    /**
    * @dev This function applies the Black-76 model formula to calculate a call price
    * @param strike The strike of the call
    * @param expiration The expiration of the call
    * @param assetPrice The underlying asset price of the call
    * @param volatility The underlying asset volatility of the call
    * @param riskFreeRate The risk free rate
    * @return The call price
    */

    function getCallPrice(uint256 strike, uint256 expiration, uint256 assetPrice, uint256 volatility, uint256 riskFreeRate) private view returns (uint256) {
        return _getOptionPrice(strike, expiration, assetPrice, volatility, riskFreeRate, true);
    }
    /**
    * @dev This function applies the Black-76 model formula to calculate a put price
    * @param strike The strike of the put
    * @param expiration The expiration of the put
    * @param assetPrice The underlying asset price of the put
    * @param volatility The underlying asset volatility of the put
    * @param riskFreeRate The risk free rate
    * @return The put price
    */
    function getPutPrice(uint256 strike, uint256 expiration, uint256 assetPrice, uint256 volatility, uint256 riskFreeRate) private view returns (uint256) {
        return _getOptionPrice(strike, expiration, assetPrice, volatility, riskFreeRate, false);
    }
    /**
    * @dev This function returns the z score for a given value in the normal distribution
    */
    function zScore(int256 z) private pure returns (uint256 result) {

        uint64[400] memory scores = [503989356314632000, 507978313716902000, 511966473414113000, 515953436852831000, 519938805838372000, 523922182654107000, 527903170180521000, 531881372013987000, 535856392585172000, 539827837277029000, 543795312542317000, 547758426020584000, 551716786654561000, 555670004805906000, 559617692370242000, 563559462891433000, 567494931675038000, 571423715900901000, 575345434734795000, 579259709439103000, 583166163482442000, 587064422648215000, 590954115142006000, 594834871697796000, 598706325682924000, 602568113201760000, 606419873198039000, 610261247555797000, 614091881198877000, 617911422188953000, 621719521822019000, 625515834723320000, 629300018940654000, 633071736036028000, 636830651175619000, 640576433217991000, 644308754800547000, 648027292424163000, 651731726535982000, 655421741610324000, 659097026227677000, 662757273151750000, 666402179404542000, 670031446339406000, 673644779712080000, 677241889749652000, 680822491217444000, 684386303483777000, 687933050582609000, 691462461274013000, 694974269102481000, 698468212453034000, 701944034605123000, 705401483784302000, 708840313211654000, 712260281150973000, 715661150953676000, 719042691101436000, 722404675246535000, 725746882249926000, 729069096216994000, 732371106531017000, 735652707884322000, 738913700307138000, 742153889194135000, 745373085328664000, 748571104904690000, 751747769546429000, 754902906325691000, 758036347776927000, 761147931910013000, 764237502220749000, 767304907699102000, 770350002835209000, 773372647623132000, 776372707562401000, 779350053657350000, 782304562414267000, 785236115836363000, 788144601416603000, 791029912128398000, 793891946414187000, 796730608171931000, 799545806739550000, 802337456877308000, 805105478748192000, 807849797896304000, 810570345223288000, 813267056962827000, 815939874653240000, 818588745108203000, 821213620385628000, 823814457754742000, 826391219661375000, 828943873691518000, 831472392533162000, 833976753936470000, 836456940672308000, 838912940489169000, 841344746068543000, 843752354978745000, 846135769627265000, 848494997211656000, 850830049669019000, 853140943624104000, 855427700336090000, 857690345644061000, 859928909911231000, 862143427967964000, 864333939053617000, 866500486757253000, 868643118957269000, 870761887759982000, 872856849437202000, 874928064362850000, 876975596948657000, 878999515578982000, 880999892544799000, 882976803976891000, 884930329778292000, 886860553556023000, 888767562552165000, 890651447574308000, 892512302925413000, 894350226333145000, 896165318878700000, 897957684925181000, 899727432045558000, 901474670950252000, 903199515414390000, 904902082204761000, 906582491006528000, 908240864349719000, 909877327535547000, 911492008562598000, 913085038052915000, 914656549178033000, 916206677584986000, 917735561322331000, 919243340766229000, 920730158546607000, 922196159473454000, 923641490463261000, 925066300465673000, 926470740390352000, 927854963034106000, 929219123008314000, 930563376666668000, 931887882033274000, 933192798731142000, 934478287911083000, 935744512181064000, 936991635536022000, 938219823288188000, 939429241997941000, 940620059405207000, 941792444361447000, 942946566762246000, 944082597480531000, 945200708300442000, 946301071851880000, 947383861545748000, 948449251509911000, 949497416525896000, 950528531966352000, 951542773733277000, 952540318197053000, 953521342136280000, 954486022678450000, 955434537241457000, 956367063475968000, 957283779208671000, 958184862386405000, 959070491021193000, 959940843136183000, 960796096712517000, 961636429637129000, 962462019651483000, 963273044301274000, 964069680887074000, 964852106415961000, 965620497554110000, 966375030580372000, 967115881340836000, 967843225204386000, 968557237019247000, 969258091070534000, 969945961038800000, 970621019959591000, 971283440183998000, 971933393340227000, 972571050296163000, 973196581122945000, 973810155059547000, 974411940478361000, 975002104851779000, 975580814719777000, 976148235658491000, 976704532249788000, 977249868051821000, 977784405570568000, 978308306232353000, 978821730357328000, 979324837133930000, 979817784594296000, 980300729590623000, 980773827772483000, 981237233565062000, 981691100148341000, 982135579437183000, 982570822062343000, 982996977352367000, 983414193316395000, 983822616627834000, 984222392608909000, 984613665216074000, 984996577026268000, 985371269224011000, 985737881589331000, 986096552486501000, 986447418853580000, 986790616192744000, 987126278561398000, 987454538564053000, 987775527344955000, 988089374581453000, 988396208478096000, 988696155761447000, 988989341675589000, 989275889978324000, 989555922938049000, 989829561331280000, 990096924440836000, 990358130054642000, 990613294465161000, 990862532469427000, 991105957369663000, 991343680974483000, 991575813600654000, 991802464075404000, 992023739739266000, 992239746449446000, 992450588583691000, 992656369044652000, 992857189264728000, 993053149211376000, 993244347392859000, 993430880864453000, 993612845235057000, 993790334674224000, 993963441919587000, 994132258284667000, 994296873667049000, 994457376556917000, 994613854045933000, 994766391836444000, 994915074251009000, 995059984242229000, 995201203402874000, 995338811976281000, 995472888867033000, 995603511651879000, 995730756590911000, 995854698638964000, 995975411457242000, 996092967425147000, 996207437652315000, 996318891990825000, 996427399047600000, 996533026196959000, 996635839593331000, 996735904184109000, 996833283722642000, 996928040781349000, 997020236764945000, 997109931923774000, 997197185367235000, 997282055077299000, 997364597922095000, 997444869669572000, 997522925001214000, 997598817525811000, 997672599793268000, 997744323308458000, 997814038545087000, 997881794959595000, 997947641005060000, 998011624145106000, 998073790867812000, 998134186699616000, 998192856219194000, 998249843071324000, 998305189980723000, 998358938765843000, 998411130352635000, 998461804788262000, 998511001254762000, 998558758082660000, 998605112764508000, 998650101968370000, 998693761551231000, 998736126572328000, 998777231306408000, 998817109256896000, 998855793168977000, 998893315042591000, 998929706145321000, 998964997025197000, 998999217523386000, 999032396786782000, 999064563280486000, 999095744800178000, 999125968484368000, 999155260826541000, 999183647687171000, 999211154305624000, 999237805311933000, 999263624738446000, 999288636031355000, 999312862062084000, 999336325138560000, 999359047016340000, 999381048909613000, 999402351502066000, 999422974957609000, 999442938930975000, 999462262578170000, 999480964566793000, 999499063086214000, 999516575857616000, 999533520143892000, 999549912759408000, 999565770079618000, 999581108050550000, 999595942198136000, 999610287637418000, 999624159081600000, 999637570850967000, 999650536881662000, 999663070734323000, 999675185602581000, 999686894321419000, 999698209375391000, 999709142906709000, 999719706723184000, 999729912306036000, 999739770817572000, 999749293108719000, 999758489726432000, 999767370920964000, 999775946653009000, 999784226600705000, 999792220166519000, 999799936483993000, 999807384424364000, 999814572603067000, 999821509386095000, 999828202896254000, 999834661019280000, 999840891409842000, 999846901497426000, 999852698492093000, 999858289390124000, 999863680979554000, 999868879845579000, 999873892375861000, 999878724765715000, 999883383023185000, 999887872974018000, 999892200266523000, 999896370376326000, 999900388611024000, 999904260114731000, 999907989872526000, 999911582714799000, 999915043321502000, 999918376226297000, 999921585820616000, 999924676357621000, 999927651956075000, 999930516604120000, 999933274162970000, 999935928370511000, 999938482844817000, 999940941087581000, 999943306487466000, 999945582323366000, 999947771767598000, 999949877889004000, 999951903655982000, 999953851939444000, 999955725515688000, 999957527069211000, 999959259195441000, 999960924403402000, 999962525118309000, 999964063684097000, 999965542365885000, 999966963352371000, 999968328758167000];
        
        z /= 1e16;
        
        if(z == 0){ return 5e17; }
        
        if (z < 0) {
            z = z*-1;
            if(z > 400){ return 0; }
            return 1e18 - scores[uint256(z - 1)];
        }
        else{
            if(z > 400){ return 1e18; }
            return scores[uint256(z - 1)];
        }
    }
    /**
    * @dev This function calculates the option price for the option types
    */
    function calculatePrice(OptFiOption option, OptFiOracle oracle) external view returns(uint256 optionPrice){
        
        (uint256 assetPrice, uint256 volatility, uint256 riskFreeRate) = oracle.getLatestData(address(option.getAssetToken()));
        
        if (option.getType() == OptFiOption.OptFiOptionType.CALL){
            optionPrice = getCallPrice(option.getStrike(0), option.getExpiration(), assetPrice, volatility, riskFreeRate);
            optionPrice = optionPrice.div(assetPrice);
        } else if (option.getType() == OptFiOption.OptFiOptionType.SPREAD){
            uint256 longCallPrice = getCallPrice(option.getStrike(0), option.getExpiration(), assetPrice, volatility, riskFreeRate);
            uint256 shortCallPrice = getCallPrice(option.getStrike(1), option.getExpiration(), assetPrice, volatility, riskFreeRate);
            optionPrice = longCallPrice - shortCallPrice;
        } else if (option.getType() == OptFiOption.OptFiOptionType.BUTTERFLY){
            uint256 long1stCallPrice = getCallPrice(option.getStrike(0), option.getExpiration(), assetPrice, volatility, riskFreeRate);
            uint256 shortCallPrice = getCallPrice(option.getStrike(1), option.getExpiration(), assetPrice, volatility, riskFreeRate);
            uint256 long2ndCallPrice = getCallPrice(option.getStrike(2), option.getExpiration(), assetPrice, volatility, riskFreeRate);
            require((long1stCallPrice + long2ndCallPrice) >= uint256(2e18).mul(shortCallPrice),"Butterfly price must be greater than zero.");
            optionPrice =  long1stCallPrice + long2ndCallPrice - uint256(2e18).mul(shortCallPrice);
        } else if (option.getType() == OptFiOption.OptFiOptionType.PUT){
            optionPrice = getPutPrice(option.getStrike(0), option.getExpiration(), assetPrice, volatility, riskFreeRate);
        }
    }
}